"use strict";
// –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
const { print, exit, github } = require("./tools.js");
const { name, version, config } = require("../package.json");
const crypto = require("crypto");
const path = require("path");
const fse = require("fs-extra");

// —Ñ–∏–∫—Å –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ –∏–∑ app –∏ source –º–æ–¥—É–ª–µ–π
global.require_path = path => require(path);
// –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ worker
global.require_paths = module.paths;

// –≤–µ—Ä—Å–∏—è –Ω–æ–¥—ã
process.versions[name] = version;
// –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞
process.env.PDB_VERSION = config.PDB_VERSION;
// –ø–∏—à–µ–º –∫–ª–∏–µ–Ω—Ç—É
print("Kernel init version [33m"+process.env.PDB_VERSION+"[39m ...");

// —ç–∫—Å–ø–æ—Ä—Ç
module.exports = {
	// –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
	get: function (cb){
		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
		let file_server_crypto = path.join(process.cwd(), "lib", "app.so");
		fse.pathExists(file_server_crypto, function (err, exists){
			// –æ—à–∏–±–∫–∞
			if(err) return callback(err);
			// –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
			if(exists){
				// —á–∏—Ç–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—É—Å–∫—É
				print("App found in local directory, decryption ...");
				fse.readFile(file_server_crypto, callback);
			}
			// –∑–∞–ø—Ä–æ—Å —Å github
			else {
				// –∑–∞–ø—Ä–æ—Å —Ç–µ–≥–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
				print("Search latest release for kernel ...");
				github("tags?per_page=100", false, function (err, data){
					// –æ—à–∏–±–∫–∞
					if(err) return callback(err);
					// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
					let tags = data.body
						// –∑–∞–ø—Ä–æ—Å –≤–µ—Ä—Å–∏–π
						.map( o => o && o.name ? o.name : "" )
						// —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
						.filter( a => a.split(".")[0] === process.env.PDB_VERSION.split(".")[0] )
						// –ø–æ–∏—Å–∫ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π
						.sort( (a, b) => b.split(".")[1] - a.split(".")[1] );
					// –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–≥
					if(tags[0] == null){
						return callback(new Error("Release by kernel version [33m"+process.env.PDB_VERSION+"[39m not found!"));
					}
					// –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞
					print("Search app in release [33m"+tags[0]+"[39m ...");
					github("releases/tags/"+tags[0], false, function (err, data){
						// –æ—à–∏–±–∫–∞
						if(err) return callback(err);
						// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π
						if(data.body && data.body.assets instanceof Array){
							// –ø–æ–∏—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
							for (let val of data.body.assets) if(val.name === "app.so"){
								// –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞
								print("Found app [33mid:"+val.id+"[39m, download ...");
								github(val.url, true, function (err, data){
									// –æ—à–∏–±–∫–∞
									if(err) return callback(err);
									// —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –≤—Å–µ –æ–∫
									print("App buffer received successfully, decryption ...");
									callback(null, data.body)
								})
								// –°–¢–û–ü
								return;
							}
						}
						// –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—à–∏–±–∫–∞
						callback(new Error("App in release [33m"+tags[0]+"[39m not found!"));
					})
				});
			}
		});

		// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		let callback = function (err, buffer){
			// –æ—à–∏–±–∫–∞
			if(err) exit(err);

			// —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
			let app = buffer.toString().split(":");

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é app
			if(app[0].split(".")[0] !== process.env.PDB_VERSION.split(".")[0]){
				exit(new Error("The app version is not suitable for the kernel version!"));
			}

			// –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
			let hash = crypto.createHash("sha512");
			hash.update(config.PDB_PASSWORD);
			let key = hash.digest().slice(0, 32);

			// —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
			let data = app[1].split("-");

			// –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
			let iv = Buffer.from(data[1], "hex");

			// –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
			let server_js = false;
			try {
				let decipher = crypto.createDecipheriv("aes-256-cbc", key, iv);
				// –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞
				server_js = Buffer.concat([decipher.update(Buffer.from(data[0]+data[2], "hex")), decipher.final()]);
			} catch (e) {
				exit(new Error("App decryption error!"));
			}

			// –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
			if(server_js){
				// –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
				let path_module = path.join(process.cwd(), "tmp", "app", "server.js");
				// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
				fse.outputFile(path_module, server_js, function (err){
					// –æ—à–∏–±–∫–∞
					if(err) exit(err);
					// –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞
					process.env.PDB_VERSION = app[0];
					// –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
					cb(require(path_module))
					// —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
					fse.remove(path.join(process.cwd(), "tmp", "app"));
					// –æ—á–∏—Å—Ç–∫–∞
					server_js = null;
				});
			} else {
				exit(new Error("Server app code is empty or not found"));
			}
		}
	}
}
