"use strict";
// –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
const { print, exit, github } = require("./tools.js");
const { name, version, config } = require("../package.json");
const crypto = require("crypto");
const path = require("path");
const fse = require("fs-extra");
const os = require("os");
const require_string = require("require-from-string");
const unzip = require("unzip-stream");
const readable = require("stream").Readable;

// —Ñ–∏–∫—Å –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ –∏–∑ app –∏ source –º–æ–¥—É–ª–µ–π
global.require_path = path => require(path);
// –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ worker
global.require_paths = module.paths;

// –≤–µ—Ä—Å–∏—è –Ω–æ–¥—ã
process.versions[name] = version;
// –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞
process.env.PDB_VERSION = config.PDB_VERSION;
// –ø–∏—à–µ–º –∫–ª–∏–µ–Ω—Ç—É
print("Kernel init version [33m"+process.env.PDB_VERSION+"[39m ...");

// —ç–∫—Å–ø–æ—Ä—Ç
module.exports = {
	// –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
	get: function (cb){
		// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
		let file_server_crypto = path.join(process.cwd(), "lib", "app.so");
		fse.pathExists(file_server_crypto, function (err, exists){
			// –æ—à–∏–±–∫–∞
			if(err) return callback(err);
			// –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
			if(exists){
				// —á–∏—Ç–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—É—Å–∫—É
				print("Application found in working directory, decryption ...");
				fse.readFile(file_server_crypto, callback);
			}
			// –∑–∞–ø—Ä–æ—Å —Å github
			else {
				// –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
				let release_latest = path.join(os.homedir(), ".projectdb", "lib", `release-${process.env.PDB_VERSION.split(".")[0]}.latest`);
				fse.readJson(release_latest, function (err, latest){
					// –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
					let check_timeout = 180000;
					// –æ—à–∏–±–∫–∞ –∏–ª–∏ –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω–∞ –≤–µ—Ä—Å–∏—è —Ä–µ–ª–∏–∑–∞
					if(err || ( +latest.time || 0 ) + check_timeout < +new Date() || latest.release == null){
						// –∑–∞–ø—Ä–æ—Å —Ç–µ–≥–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
						print("Search latest release for kernel on GitHub ...");
						github("tags?per_page=100", false, function (err, data){
							// –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω —Ä–µ–ª–∏–∑, –∑–∞–ø—É—Å–∫
							if(err) return latest && latest.release ? check(latest.release) : callback(err);
							// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
							let tags = data.body
								// –∑–∞–ø—Ä–æ—Å –≤–µ—Ä—Å–∏–π
								.map( o => o && o.name ? o.name : "" )
								// —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
								.filter( a => a.split(".")[0] === process.env.PDB_VERSION.split(".")[0] )
								// –ø–æ–∏—Å–∫ —Å–∞–º–æ–π —Å–≤–µ–∂–µ–π
								.sort( (a, b) => b.split(".")[1] - a.split(".")[1] );
							// –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–≥
							if(tags[0] == null){
								return callback(new Error("Release by kernel version [33m"+process.env.PDB_VERSION+"[39m not found!"));
							}
							// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
							fse.outputJson(release_latest, { time: +new Date(), release: tags[0] }, function(err){
								if(err) return callback(err);
								// –∑–∞–ø—É—Å–∫
								check(tags[0]);
							});
						});
						// –°–¢–û–ü
						return;
					}
					// –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç –≤ 60 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å –¥–ª—è –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
					print("Search latest release on GitHub skipped, next check on [31m"+Math.ceil((latest.time + check_timeout - +new Date()) / 1000)+"[39m seconds");
					check(latest.release);
				});

				// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–ª–∏–∑–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
				let check = function (release){
					// –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ –∫–µ—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					let cache_file_server_crypto = path.join(os.homedir(), ".projectdb", "lib", release, "app.so");
					fse.pathExists(cache_file_server_crypto, function (err, exists){
						// –æ—à–∏–±–∫–∞
						if(err) return callback(err);
						// –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–µ—à–µ
						if(exists){
							// —á–∏—Ç–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—É—Å–∫—É
							print("Application release [33m"+release+"[39m found in user cache, decryption ...");
							fse.readFile(cache_file_server_crypto, callback);
						}
						// –∑–∞–ø—Ä–æ—Å —Å github
						else {
							// –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞
							print("Search app in release [33m"+release+"[39m ...");
							github("releases/tags/"+release, false, function (err, data){
								// –æ—à–∏–±–∫–∞
								if(err) return callback(err);
								// –ø–æ–∏—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
								if(data.body?.assets instanceof Array) for(let v1 of data.body.assets) if(v1.name === "app.so"){
									// –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
									print("Found app [33mid:"+v1.id+"[39m, download ...");
									github(v1.url, true, function (err, app_so){
										// –æ—à–∏–±–∫–∞
										if(err) return callback(err);
										// –ø–æ–∏—Å–∫ —Ö–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
										if(data.body?.assets instanceof Array) for(let v2 of data.body.assets) if(v2.name === "app.so.sha384"){
											// –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
											print("Found app hash [33mid:"+v2.id+"[39m, download ...");
											github(v2.url, true, function (err, app_so_sha384){
												// –æ—à–∏–±–∫–∞
												if(err) return callback(err);
												// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
												if(app_so_sha384.body == null || app_so_sha384.body.length === 0){
													return callback(new Error("The application hash could not be loaded!"));
												}
												// —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–µ—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
												if(app_so_sha384.body.toString() !== crypto.createHash("sha384").update(app_so.body).digest("hex")){
													return callback(new Error("The downloaded application hash does not match the repository, please try running it again."));
												}
												// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
												print("Application buffer successfully retrieved, save to user cache ...");
												fse.outputFile(cache_file_server_crypto, app_so.body, function (err){
													// –æ—à–∏–±–∫–∞
													if(err) return callback(err);
													// —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –≤—Å–µ –æ–∫
													print("Successfully saved to [33m"+cache_file_server_crypto+"[39m, decryption ...");
													callback(null, app_so.body);
												});
											});
											// –°–¢–û–ü
											return;
										}
										// –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—à–∏–±–∫–∞
										callback(new Error("Application hash for release [33m"+release+"[39m not found!"));
									});
									// –°–¢–û–ü
									return;
								}
								// –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—à–∏–±–∫–∞
								callback(new Error("Application in release [33m"+release+"[39m not found!"));
							});
						}
					});
				};
			}
		});

		// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
		let callback = function (err, buffer){
			// –æ—à–∏–±–∫–∞
			if(err) exit(err);

			// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞
			if(buffer == null || buffer.length === 0){
				exit(new Error("Application buffer is empty, check installed library in working directory and user home directory cache."));
			}

			// —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
			let app = buffer.toString().split(":");

			// –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é app
			if(app[0].split(".")[0] !== process.env.PDB_VERSION.split(".")[0]){
				exit(new Error("The application version does not match the kernel version!"));
			}

			// –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
			let hash = crypto.createHash("sha512");
			hash.update(config.PDB_PASSWORD);
			let key = hash.digest().slice(0, 32);

			// —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
			let data = app[1].split("-");

			// –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
			let iv = Buffer.from(data[1], "hex");

			// –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
			let server_js;
			try {
				let decipher = crypto.createDecipheriv("aes-256-cbc", key, iv);
				// –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞
				server_js = Buffer.concat([decipher.update(Buffer.from(data[0]+data[2], "hex")), decipher.final()]);
			} catch (e) {
				exit(new Error("Application decryption error!"));
			}

			// –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
			if(server_js){
				// –ø—É—Ç—å –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É
				const path_tmp_app = path.join(process.cwd(), "tmp", "server", process.env.PDB_SERVERNAME, "app");
				// –±–∞–∑–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤
				const database = {};
				// —Å—á–µ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏
				let count = 0;
				// —Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –∏–∑ –±—É—Ñ–µ—Ä–∞
				readable.from(server_js)
					// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞
					.pipe(unzip.Parse())
					.on("entry", function (entry) {
						if(entry.type === "File"){
							count++;
							let bufs = [];
							entry.on("data", d => bufs.push(d));
							entry.on("end", function(){
								database[entry.path] = Buffer.concat(bufs);
								count--;
								// –∑–∞–∫–æ–Ω—á–∏–ª–∏ —á—Ç–µ–Ω–∏–µ
								if(count === 0){
									// –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞
									process.env.PDB_VERSION = app[0];
									// –∑–∞–≥—Ä—É–∑–∫–∞ pdb –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
									global.pdb = require_string(database["pdb.js"].toString(), path.join(path_tmp_app, "pdb.js"));
									// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ —Ñ–∞–π–ª–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
									pdb.buffer = database["pdb.js"];
									// –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
									cb(require_string(database["server.js"].toString(), path.join(path_tmp_app, "server.js")));
								}
							});
						} else {
							entry.autodrain();
						}
					})
					.on("error", exit);
			} else {
				exit(new Error("Server app code is empty or not found."));
			}
		}
	}
}
