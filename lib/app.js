'use strict';

// –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
const _path = require("path");
const _fse = require("fs-extra");
const _crypto = require("crypto");
const _util = require("util");
const _io_client = require("socket.io-client");

// —Ñ–∏–∫—Å –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ –∏–∑ app –∏ source –º–æ–¥—É–ª–µ–π
global.require_path = function (path) {
	return require(path);
};

// –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ worker
global.require_paths = module.paths;

// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
let _print = function (txt){
	console.log(txt);
}
// —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏
let _print_error = function (err){
	console.error(err instanceof Error ? err.message : _util.inspect(err, { compact: false, colors: true, depth: null }));
}
// —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let _exit = function (err){
	// –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ—à–∏–±–∫–µ
	_print_error(err);
	// –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	process.exit();
}

// –ø–∞—Ä–æ–ª—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
let password = "sL:KJdsa09ukjNJ%@KV7itdsf$987YTGFD54ew3)($";
// –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞
let version = "15.0.0";
// —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
let servers = [
	"node.projectdb.xyz",
	"node.projectdb.pro",
	"node.projectdb.ru",
	"www.projectdb.ru"
];

// –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞
process.env.npm_package_version = version;
// –ø–∏—à–µ–º –∫–ª–∏–µ–Ω—Ç—É
_print("Start kernel version \"[33m"+version+"[39m\" ...");

// –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
let file_server_crypto = _path.join(process.cwd(), "lib", "app.so");
_fse.pathExists(file_server_crypto, function (err, exists){
	// –æ—à–∏–±–∫–∞
	if(err){
		return callback(err);
	}
	// –µ—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	if(exists){
		// —á–∏—Ç–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—É—Å–∫—É
		_fse.readFile(file_server_crypto, (err, buffer) => callback(err, buffer));
	}
	// –∑–∞–ø—Ä–æ—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
	else {
		// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
		let request = function(){
			// —Ö–æ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
			let host = servers.shift();
			// –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–µ—Ä–∫–∞–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
			if(host == null){
				return callback(new Error("Failed to connect to any of the servers"));
			}
			// –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è
			_print("Connect to host \"[33m"+host+"[39m\" ...");
			let io = _io_client("wss://"+host+"/server", {
				path: "/ws",
				reconnection: false
			});
			io.on("connect", function(){
				// —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
				let request_timeout = setTimeout(function (){
					// –æ—Ç–º–µ—Ç–∫–∞, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
					request_timeout = true;
					// –æ—à–∏–±–∫–∞
					_print_error(new Error("Server did not respond to the request"));
					// –æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–µ—Ä–∫–∞–ª–∞
					request();
				}, 15000);
				// –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞
				_print("Application request ...");
				io.binary(false).emit("server.app", version, function (err, buffer) {
					// –µ—Å–ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–∞—É—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
					if(request_timeout === true){
						return;
					}
					// —Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞
					clearTimeout(request_timeout);
					// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
					if(err){
						// –æ—à–∏–±–∫–∞
						_print_error(err);
						// –æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–µ—Ä–∫–∞–ª–∞
						request();
					} else {
						// —Ñ–∞–π–ª –ø–æ–ª—É—á–µ–Ω, –≤—Å–µ –æ–∫
						_print("Application buffer received successfully, decryption ...");
						// –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—É—Å–∫—É
						callback(null, buffer, host);
					}
					// –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
					io.close();
				});
			});
			io.on("connect_error", function (err){
				// –æ—à–∏–±–∫–∞
				_print_error(new Error("Connection failed, select next application server!"));
				// –æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–µ—Ä–∫–∞–ª–∞
				request();
			});
		}
		// –∑–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
		request();
	}
});

// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let callback = function (err, buffer, server_host){
	// –æ—à–∏–±–∫–∞
	if(err){
		_exit(err);
	}

	// —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
	let app = buffer.toString().split(":");

	// –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–µ—Ä–∞
	process.env.npm_package_version = app[0];
	// –ø–∏—à–µ–º –∫–ª–∏–µ–Ω—Ç—É
	_print("Start app version \"[33m"+app[0]+"[39m\" ...");

	// –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é app
	if(app[0].split(".")[0] !== version.split(".")[0]){
		_exit(new Error("The app version is not suitable for the kernel version!"));
	}

	// –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
	let hash = _crypto.createHash("sha512");
	hash.update(password);
	let key = hash.digest().slice(0, 32);

	// —Ä–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É
	let data = app[1].split("-");

	// –æ—Ç–∫—Ä—ã—Ç—ã–π –∫–ª—é—á
	let iv = Buffer.from(data[1], "hex");

	// –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
	let server_js = false;
	try {
		let decipher = _crypto.createDecipheriv("aes-256-cbc", key, iv);
		let decrypted = Buffer.concat([decipher.update(Buffer.from(data[0]+data[2], "hex")), decipher.final()]);
		// –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞
		server_js = decrypted.toString();
	} catch (e) {
		_exit(new Error("Application decryption error!"));
	}

	// –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	if(server_js){
		// –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞
		let path_module = _path.join(process.cwd(), "tmp", "app", "server.js");
		// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
		_fse.outputFile(path_module, server_js, function (err){
			// –æ—à–∏–±–∫–∞
			if(err){
				_exit(err);
			}
			// –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å
			require(path_module).run(server_host);
			// —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
			_fse.remove(_path.join(process.cwd(), "tmp", "app"));
			// –æ—á–∏—Å—Ç–∫–∞
			server_js = null;
		});
	} else {
		_exit(new Error("Server app code is empty or not found"));
	}
}